autoinstall:
  version: 1
  # System Identity Configuration
  identity:
    hostname: Test
    username: Admin
    # Password: "Test" encrypted
    password: "532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e25"
    locale: fr_FR
  keyboard:
    layout: fr
    variant: oss
  timezone: Europe/Paris

  # Enable SSH Server
  ssh:
    install-server: true

  # Base System Packages
  packages:
    # System Utilities
    - curl
    - wget
    - git
    - vim
    - neovim
    - htop
    - btop
    - ncdu
    - tree
    - tmux
    - ripgrep
    - fd-find
    - jq
    - unzip

    # Development Tools
    - make
    - build-essential
    - software-properties-common
    - apt-transport-https
    - cmake
    - pkg-config

    # Shell and Terminal
    - zsh
    - fonts-powerline

    # Python Dependencies
    - libssl-dev
    - zlib1g-dev
    - libbz2-dev
    - libreadline-dev
    - libsqlite3-dev
    - llvm
    - libncursesw5-dev
    - xz-utils
    - tk-dev
    - libxml2-dev
    - libxmlsec1-dev
    - libffi-dev
    - liblzma-dev

    # Java Development
    - default-jre
    - default-jdk

    # System Performance
    - laptop-mode-tools
    - preload
    - tlp

    # Media Codecs
    - ubuntu-restricted-extras

    # Network Tools
    - net-tools
    - nmap
    - traceroute
    - whois

  # Snap Packages
  snaps:
    # Development IDEs
    - name: pycharm-professional
      classic: true
    - name: intellij-idea-ultimate
      classic: true

    # Development Tools
    - name: postman
    - name: docker
    - name: kubectl
    - name: k9s
      classic: true

    # Communication
    - name: mattermost-desktop
    - name: chrome
    - name: slack
      classic: true

    # Utilities
    - name: dbeaver-ce

  # Post-installation Configuration
  user-data:
    late-commands:
      # Add user to sudoers
      - echo "admin ALL=(ALL) NOPASSWD:ALL" > /target/etc/sudoers.d/admin

      # Create and execute post-install script
      - |
        cat <<EOF > /target/root/install.sh
        #!/bin/bash

        # System Performance Tuning
        echo 'vm.swappiness=10' >> /etc/sysctl.conf
        echo 'vm.vfs_cache_pressure=50' >> /etc/sysctl.conf

        # Configure Swap
        swapoff -a
        dd if=/dev/zero of=/swapfile bs=1G count=$(free -h | grep Mem | awk '{print $2}' | sed 's/Gi//')
        chmod 600 /swapfile
        mkswap /swapfile
        swapon /swapfile
        echo '/swapfile none swap sw 0 0' >> /etc/fstab

        # Install Oh My Zsh with custom plugins
        sudo -u admin sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended

        # Install ZSH plugins
        sudo -u admin git clone https://github.com/zsh-users/zsh-autosuggestions \${ZSH_CUSTOM:-/home/admin/.oh-my-zsh/custom}/plugins/zsh-autosuggestions
        sudo -u admin git clone https://github.com/zsh-users/zsh-syntax-highlighting \${ZSH_CUSTOM:-/home/admin/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting

        # Configure ZSH
        cp /root/.bash_profile /home/Admin/.
        cat <<EOT >> /home/admin/.zshrc
        source ~/.bash_profile

        # Theme Configuration
        ZSH_THEME="powerlevel10k/powerlevel10k"

        # Plugins
        plugins=(
          git
          docker
          docker-compose
          kubectl
          pyenv
          npm
          zsh-autosuggestions
          zsh-syntax-highlighting
        )

        # Aliases
        alias ll='ls -lah'
        alias update='sudo apt update && sudo apt upgrade -y'
        alias cls='clear'
        alias python='python3'
        alias pip='pip3'

        # Path modifications
        export PATH=\$HOME/.local/bin:\$PATH
        EOT

        chown admin:admin /home/admin/.bash_profile /home/admin/.zshrc

        # Install Docker and Docker Compose
        apt-get install apt-transport-https ca-certificates curl gnupg-agent software-properties-common -y
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
        add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu \$(lsb_release -cs) stable"
        apt-get update -y
        apt-get install docker-ce docker-ce-cli containerd.io -y
        groupadd docker
        usermod -aG docker admin
        apt install docker-compose -y

        # Install pyenv and Python versions
        sudo -u admin curl https://pyenv.run | bash
        sudo -u admin bash -c "echo 'export PYENV_ROOT=\"\\\$HOME/.pyenv\"' >> ~/.bash_profile"
        sudo -u admin bash -c "echo '[[ -d \\\$PYENV_ROOT/bin ]] && export PATH=\"\\\$PYENV_ROOT/bin:\\\$PATH\"' >> ~/.bash_profile"
        sudo -u admin bash -c "echo 'eval \"\$(pyenv init -)\"' >> ~/.bash_profile"
        sudo -u admin bash -c "source ~/.bash_profile && pyenv install 3.8.18 && pyenv install 3.10.13 && pyenv install 3.12.1 && pyenv global 3.10.13"

        # Install Node Version Manager (nvm)
        sudo -u admin curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash

        # Configure Git
        sudo -u admin git config --global core.editor "vim"
        sudo -u admin git config --global init.defaultBranch main

        # Enable services
        systemctl enable docker
        systemctl enable tlp

        late-commands:
      - echo "Creating user script on desktop" > /target/root/script.log
      - mkdir -p /target/home/ubuntu/Bureau
      - chown 1000:1000 /target/home/ubuntu/Bureau
      - cat << 'EOF' > /target/home/ubuntu/Bureau/new-user.sh
#!/bin/bash
       if [ $(id -u) -eq 0 ]
          then
read -p "Nom d'utilisateur (premiere lettre prÃ©nom + nom) : " username
  egrep "^$username" /etc/passwd >/dev/null
  if [ $? -eq 0 ]
  then
    echo "$username exists!"
    exit 1
  else
    pass='$6$eihszBM6AONL7ZfB$S2vIWn32tMOESDgn8ewlMLX7VKo.9xx0CxVIy4Ux5n9D7VfGh9UnSht3zrT6SQj71XQvsR86r54i/AbR0smGH/'
    useradd -m -s /bin/bash -p "$pass" "$username"
    [ $? -eq 0 ] && echo "User has been added to system!" || echo "Failed to add a user!"
    runuser -l $username -c 'sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended' && chsh -s /bin/zsh
    curl -fsSL https://raw.githubusercontent.com/nagygergo/jetbrains-toolbox-install/master/jetbrains-toolbox.sh | bash
    usermod -aG sudo $username
    usermod -aG docker $username
    echo; echo 'eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"' >> /home/$username/.zshrc
  fi
  else
  echo "Only root may add a user to the system."
  exit 2
  fi
  EOF
    - chmod +x /target/home/ubuntu/Bureau/new-user.sh
    - chown 1000:1000 /target/home/ubuntu/Bureau/new-user.sh
        # Cleanup
        rm -rf /root/install.sh
        EOF
      - chmod +x /target/root/install.sh
      - in-target -- /root/install.sh
